
package org.opentest4j;

import org.opentest4j.debug.DebuggableObject;

import static org.junit.Assert.*;

/**
 * Utility to perform some standard checks to exceptions.
 *
 * @author Mark Michaelis
 * @since 1.0
 */
@SuppressWarnings("ThrowableInstanceNeverThrown")
public final class ExceptionTestHelper {

	public static final Exception CAUSE_EXCEPTION = new RuntimeException("the cause");
	public static final RuntimeException EXCEPTION_REFERENCE_ONLY_CAUSE = new RuntimeException(CAUSE_EXCEPTION);
	public static final RuntimeException EXCEPTION_REFERENCE_NO_ARG = new RuntimeException();
	public static final String MESSAGE_REFERENCE = "  the   message  ";
	public static final RuntimeException EXCEPTION_REFERENCE_MESSAGE_CAUSE = new RuntimeException(MESSAGE_REFERENCE,
		CAUSE_EXCEPTION);
	public static final RuntimeException EXCEPTION_REFERENCE_ONLY_MESSAGE = new RuntimeException(MESSAGE_REFERENCE);

	public static <T extends Exception> void assertBehavesLikeStandardException(Class<T> exceptionClass)
			throws Exception {
		assertNoArgConstructorBehavesAsExpected(exceptionClass);
		assertOnlyMessageConstructorBehavesAsExpected(exceptionClass);
		assertOnlyCauseConstructorBehavesAsExpected(exceptionClass);
		assertMessageCauseConstructorBehavesAsExpected(exceptionClass);
	}

	public static <T extends Exception> void assertCanInitCause(T exceptionInstance) {
		try {
			exceptionInstance.initCause(CAUSE_EXCEPTION);
			assertSame("cause after init", exceptionInstance.getCause(), CAUSE_EXCEPTION);
		}
		catch (Exception e) {
			fail("Should have been able to initialize cause.");
		}
	}

	public static <T extends Exception> void assertCannotInitCause(T exceptionInstance) {
		Throwable causeBefore = exceptionInstance.getCause();
		try {
			exceptionInstance.initCause(CAUSE_EXCEPTION);
			fail("Should have failed as cause is already initialized.");
		}
		catch (Exception e) {
			assertSame("cause unchanged after init", exceptionInstance.getCause(), causeBefore);
		}
	}

	private static <T extends Throwable> void assertExceptionSimilarTo(String message, Throwable referenceException,
			T exceptionInstance) {
		assertEquals(message + ":message", referenceException.getMessage(), exceptionInstance.getMessage());
		assertEquals(message + ":localized message", referenceException.getLocalizedMessage(),
			exceptionInstance.getLocalizedMessage());
		assertExceptionEqualTo(message + ":cause", referenceException.getCause(), exceptionInstance.getCause());
		assertExceptionEqualToDebuggable(referenceException, exceptionInstance);
	}

	private static void assertExceptionEqualTo(String message, Throwable expected, Throwable actual) {
		assertTrue(message + ":null", expected == null ? actual == null : actual != null);
		if (expected == null) {
			return;
		}
		assertSame(message + ":class", expected.getClass(), actual.getClass());
		assertExceptionSimilarTo(message, expected, actual);
	}

	private static <T extends Throwable> void assertExceptionEqualToDebuggable(Throwable referenceException,
			T exceptionInstance) {
		if (exceptionInstance instanceof DebuggableObject) {
			DebuggableObject debuggableObject = (DebuggableObject) exceptionInstance;
			if (referenceException instanceof DebuggableObject) {
				DebuggableObject debuggableReference = (DebuggableObject) referenceException;
				assertEquals("hasDebugInformation", debuggableReference.hasDebugInformation(),
					debuggableObject.hasDebugInformation());
				assertEquals("debugInformation", debuggableReference.getDebugInformation(),
					debuggableObject.getDebugInformation());
			}
			else {
				assertFalse("hasDebugInformation", debuggableObject.hasDebugInformation());
				assertNull("debugInformation", debuggableObject.getDebugInformation());
			}
		}
	}

	private static <T extends Exception> void assertNoArgConstructorBehavesAsExpected(Class<T> exceptionClass)
			throws Exception {
		T exceptionInstance = exceptionClass.getConstructor().newInstance();

		assertExceptionSimilarTo("", EXCEPTION_REFERENCE_NO_ARG, exceptionInstance);
		assertCanInitCause(exceptionInstance);

		T deserializedInstance = exceptionClass.cast(
			TestSerializationHelper.serializeAndDeserialize(exceptionInstance));
		assertExceptionSimilarTo("", exceptionInstance, deserializedInstance);
	}

	private static <T extends Exception> void assertOnlyMessageConstructorBehavesAsExpected(Class<T> exceptionClass)
			throws Exception {
		T exceptionInstance = exceptionClass.getConstructor(String.class).newInstance(MESSAGE_REFERENCE);

		assertExceptionSimilarTo("", EXCEPTION_REFERENCE_ONLY_MESSAGE, exceptionInstance);
		assertCanInitCause(exceptionInstance);

		T deserializedInstance = exceptionClass.cast(
			TestSerializationHelper.serializeAndDeserialize(exceptionInstance));
		assertExceptionSimilarTo("", exceptionInstance, deserializedInstance);
	}

	private static <T extends Exception> void assertOnlyCauseConstructorBehavesAsExpected(Class<T> exceptionClass)
			throws Exception {
		T exceptionInstance = exceptionClass.getConstructor(Throwable.class).newInstance(CAUSE_EXCEPTION);

		assertExceptionSimilarTo("", EXCEPTION_REFERENCE_ONLY_CAUSE, exceptionInstance);
		assertCannotInitCause(exceptionInstance);

		T deserializedInstance = exceptionClass.cast(
			TestSerializationHelper.serializeAndDeserialize(exceptionInstance));
		assertExceptionSimilarTo("", exceptionInstance, deserializedInstance);
	}

	private static <T extends Exception> void assertMessageCauseConstructorBehavesAsExpected(Class<T> exceptionClass)
			throws Exception {
		T exceptionInstance = exceptionClass.getConstructor(String.class, Throwable.class).newInstance(
			MESSAGE_REFERENCE, CAUSE_EXCEPTION);

		assertExceptionSimilarTo("", EXCEPTION_REFERENCE_MESSAGE_CAUSE, exceptionInstance);
		assertCannotInitCause(exceptionInstance);

		T deserializedInstance = exceptionClass.cast(
			TestSerializationHelper.serializeAndDeserialize(exceptionInstance));
		assertExceptionSimilarTo("", exceptionInstance, deserializedInstance);
	}

}


package org.opentest4j.debug.serializer;

import static java.awt.image.BufferedImage.TYPE_BYTE_GRAY;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.Serializable;

import org.junit.Before;
import org.junit.Test;
import org.opentest4j.TestSerializationHelper;
import org.opentest4j.TestFixtures.SomeNonSerializable;
import org.opentest4j.TestFixtures.SomeSerializable;

/**
 * Tests {@link RenderedImageSerializer}.
 *
 * @author Mark Michaelis
 * @since 1.0
 */
public class RenderedImageSerializerTests {

	private BufferedImage originalImage;
	private ValueSerializer serializer;

	@Before
	public void setUp() throws Exception {
		this.originalImage = new BufferedImage(1, 1, TYPE_BYTE_GRAY);
		this.serializer = new RenderedImageSerializer();
	}

	@Test
	public void canSerializeWrappedImage() throws Exception {
		Serializable serializable = this.serializer.serialize(this.originalImage);

		assertNotNull("Should have provided serializable image representation.", serializable);

		Object deserializedObject = TestSerializationHelper.serializeAndDeserialize(serializable);

		assertTrue("Deserialized result should be some ValueWrapper: " + deserializedObject.getClass(),
			deserializedObject instanceof ValueWrapper);

		ValueWrapper wrapper = (ValueWrapper) deserializedObject;
		Object wrappedValue = wrapper.getValue();

		assertTrue("Wrapped value should be some RenderedImage: " + wrappedValue.getClass(),
			wrappedValue instanceof RenderedImage);
		RenderedImage deserializedImage = (RenderedImage) wrappedValue;
		assertEquals("width", this.originalImage.getWidth(), deserializedImage.getWidth());
		assertEquals("height", this.originalImage.getHeight(), deserializedImage.getHeight());
	}

	@Test
	public void nullShouldNotBeSerialized() throws Exception {
		Serializable serializable = this.serializer.serialize(null);
		assertNull(serializable);
	}

	@Test
	public void shouldNotProvideSerializableForNonSerializableNonImage() throws Exception {
		Serializable serializable = this.serializer.serialize(new SomeNonSerializable());
		assertNull(serializable);
	}

	@Test
	public void shouldNotProvideSerializableForSerializableNonImage() throws Exception {
		Serializable serializable = this.serializer.serialize(new SomeSerializable());
		assertNull(serializable);
	}
}

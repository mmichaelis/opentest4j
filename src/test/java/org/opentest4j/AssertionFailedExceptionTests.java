/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j;

import static org.junit.Assert.*;
import static org.opentest4j.ExceptionTestHelper.assertBehavesLikeStandardException;

import org.junit.Ignore;
import org.junit.Test;

/**
 * Unit tests for {@link AssertionFailedException}.
 *
 * @author Marc Philipp
 * @author Sam Brannen
 * @author Mark Michaelis
 * @since 1.0
 */
@SuppressWarnings("ThrowableResultOfMethodCallIgnored")
public class AssertionFailedExceptionTests {

	@Test
	public void standardConstructorsHaveSameBehaviorAsJavaStandard() throws Exception {
		assertBehavesLikeStandardException(AssertionFailedException.class);
	}

	@Test
	@Ignore(value = "Having no message for standard exceptions leads to null message - not an empty message.")
	public void nullMessageIsConvertedToEmptyString() {
		assertEquals("", new AssertionFailedException().getMessage());
		assertEquals("", new AssertionFailedException((String)null).getMessage());
		assertEquals("", new AssertionFailedException((String)null, (Throwable)null).getMessage());
		assertEquals("", new AssertionFailedException(null, "foo", "bar").getMessage());
		assertEquals("", new AssertionFailedException(null, "foo", "bar", null).getMessage());
	}

	@Test
	@Ignore(value = "Standard exceptions do not trim messages.")
	public void blankMessageIsConvertedToEmptyString() {
		assertEquals("", new AssertionFailedException("   ").getMessage());
		assertEquals("", new AssertionFailedException("   ", (Throwable)null).getMessage());
		assertEquals("", new AssertionFailedException("   ", "foo", "bar").getMessage());
		assertEquals("", new AssertionFailedException("   ", "foo", "bar", null).getMessage());
	}

	@Test
	public void messageAndCauseAreStored() {
		RuntimeException cause = new RuntimeException("cause");

		AssertionFailedException error = new AssertionFailedException("my message", cause);

		assertEquals("my message", error.getMessage());
		assertEquals(cause, error.getCause());
		assertFalse(error.isExpectedDefined());
		assertFalse(error.isActualDefined());
	}

	@Test
	public void expectedAndActualValuesAreStored() {
		AssertionFailedException errorWithExpectedAndActual = new AssertionFailedException(null, "foo", "bar");
		assertTrue(errorWithExpectedAndActual.isExpectedDefined());
		assertEquals("foo", errorWithExpectedAndActual.getExpected().getValue());
		assertTrue(errorWithExpectedAndActual.isActualDefined());
		assertEquals("bar", errorWithExpectedAndActual.getActual().getValue());
	}

	@Test
	public void returnsNullForExpectedAndActualWhenNotPassedToConstructor() {
		AssertionFailedException errorWithoutExpectedAndActual = new AssertionFailedException();
		assertFalse(errorWithoutExpectedAndActual.isExpectedDefined());
		assertNull(errorWithoutExpectedAndActual.getExpected());
		assertFalse(errorWithoutExpectedAndActual.isActualDefined());
		assertNull(errorWithoutExpectedAndActual.getActual());
	}

	@Test
	public void serializationWorksForAssertionFailedErrorWithMessageAndExpectedAndActualValues() throws Exception {
		AssertionFailedException error = serializeAndDeserialize(
			new AssertionFailedException("a message", "foo", "bar"));

		assertEquals("a message", error.getMessage());
		assertTrue(error.isExpectedDefined());
		assertEquals("foo", error.getExpected().getValue());
		assertTrue(error.isActualDefined());
		assertEquals("bar", error.getActual().getValue());
	}

	@Test
	public void serializationWorksForAssertionFailedErrorWithoutAnyValues() throws Exception {
		AssertionFailedException originalError = new AssertionFailedException();
		AssertionFailedException error = serializeAndDeserialize(originalError);

		assertEquals(originalError.getMessage(), error.getMessage());
		assertEquals(originalError.isExpectedDefined(), error.isExpectedDefined());
		assertEquals(originalError.getExpected(), error.getExpected());
		assertEquals(originalError.isActualDefined(), error.isActualDefined());
		assertEquals(originalError.getActual(), error.getActual());
	}

	private AssertionFailedException serializeAndDeserialize(AssertionFailedException originalError) throws Exception {
		return (AssertionFailedException) TestSerializationHelper.serializeAndDeserialize(originalError);
	}

}


package org.opentest4j.debug.serializer;

import java.awt.image.RenderedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

import javax.imageio.ImageIO;

/**
 * Serializable version of an image. The implementation transforms the image to a PNG byte array on write and rebuilds
 * it from these PNG bytes.
 *
 * @author Mark Michaelis
 * @since 1.0
 */
public class SerializableRenderedImage extends AbstractValueWrapper {

	private static final long serialVersionUID = -3022493285395116470L;
	/**
	 * The image type to use for transferring the image.
	 */
	private static final String IMAGE_TYPE = "png";
	/**
	 * The wrapped rendered image.
	 */
	private transient RenderedImage renderedImage;

	/**
	 * Constructor.
	 *
	 * @param renderedImage image to represent as serializable; must not be {@code null}
	 */
	public SerializableRenderedImage(RenderedImage renderedImage) {
		this.renderedImage = renderedImage;
		putData("colorModel", String.valueOf(renderedImage.getColorModel()));
	}

	private static byte[] getImageAsBytes(RenderedImage im) throws IOException {
		ByteArrayOutputStream output = new ByteArrayOutputStream();
		if (!ImageIO.write(im, IMAGE_TYPE, output)) {
			throw new IOException("Failed to serialize image as type: " + IMAGE_TYPE);
		}
		return output.toByteArray();
	}

	@Override
	public Object getValue() {
		return this.renderedImage;
	}

	private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
		stream.defaultWriteObject();
		byte[] pngByteArray = getImageAsBytes(this.renderedImage);
		stream.writeInt(pngByteArray.length);
		stream.write(pngByteArray);
	}

	private void readObject(java.io.ObjectInputStream stream) throws ClassNotFoundException, IOException {
		stream.defaultReadObject();
		byte[] pngByteArray = readImageBytes(stream);
		this.renderedImage = ImageIO.read(new ByteArrayInputStream(pngByteArray));
	}

	private byte[] readImageBytes(ObjectInputStream stream) throws IOException {
		int pngByteArraySize = stream.readInt();
		byte[] pngByteArray = new byte[pngByteArraySize];
		int readByteCount = stream.read(pngByteArray);
		if (pngByteArraySize != readByteCount) {
			throw new IOException("Failed to fully read image byte array.");
		}
		return pngByteArray;
	}

}

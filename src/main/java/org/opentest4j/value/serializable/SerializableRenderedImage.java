
package org.opentest4j.value.serializable;

import java.awt.image.RenderedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import javax.imageio.ImageIO;

/**
 * @author Mark Michaelis
 * @since 1.0
 */
public class SerializableRenderedImage implements ValueWrapper {

	private static final long serialVersionUID = -3022493285395116470L;
	private static final String IMAGE_TYPE = "png";
	private transient RenderedImage renderedImage;

	public SerializableRenderedImage(RenderedImage renderedImage) {
		this.renderedImage = renderedImage;
	}

	@Override
	public Object getValue() {
		return this.renderedImage;
	}

	private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
		ByteArrayOutputStream output = new ByteArrayOutputStream();
		stream.defaultWriteObject();
		if (!ImageIO.write(this.renderedImage, IMAGE_TYPE, output)) {
			throw new IOException("Failed to serialize image as type: " + IMAGE_TYPE);
		}
		byte[] pngByteArray = output.toByteArray();
		stream.writeInt(pngByteArray.length);
		stream.write(pngByteArray);
	}

	private void readObject(java.io.ObjectInputStream stream) throws ClassNotFoundException, IOException {
		stream.defaultReadObject();
		int pngByteArraySize = stream.readInt();
		byte[] pngByteArray = new byte[pngByteArraySize];
		int readByteCount = stream.read(pngByteArray);
		if (pngByteArraySize != readByteCount) {
			throw new IOException("Failed to fully read image byte array.");
		}
		this.renderedImage = ImageIO.read(new ByteArrayInputStream(pngByteArray));
	}

}
